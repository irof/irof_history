package com.irof.adapter;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.URL;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.List;import java.util.Locale;import org.apache.http.HttpResponse;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.HttpClient;import org.apache.http.client.ResponseHandler;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.DefaultHttpClient;import org.json.JSONArray;import org.json.JSONObject;import twitter4j.Query;import twitter4j.URLEntity;import twitter4j.User;import twitter4j.util.TimeSpanConverter;import android.app.Activity;import android.app.ProgressDialog;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.AsyncTask;import android.widget.ListView;import com.irof.irof_history.R;import com.irof.sns.ImageCache;import com.irof.sns.twitter_main;import com.irof.util.LogUtil;import com.irof.util.PrefUtil;import com.irof.util.ShortURL;import com.loopj.android.http.AsyncHttpClient;import com.loopj.android.http.BinaryHttpResponseHandler;public class TopsyLoadTask extends AsyncTask<Void, String, String[]> {	private final static boolean b_publishProgress = true;	private final static boolean bUseTopsy = false;    private final boolean image_load_async = true;	private final static String TAG= "TopsyLoadTask";		private boolean change_f = false;	private Activity activity = null;	//SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");	//SimpleDateFormat dfq = new SimpleDateFormat("yyyy-MM-dd");// HH");	//SimpleDateFormat dft = new SimpleDateFormat("MM/dd");// HH");	String progressMsg = "";	boolean isTcoFlag = false;	long nowTime = 0;	boolean jp_flag = false;	boolean debug_f = false;	boolean skip_at = true;	/*		//String search_url_topsy = "http://otter.topsy.com/search.json?page=1&perpage=20&q=%23ttnlive&window=d";    private String search_url_topsy= "http://otter.topsy.com/search.json?page=1&perpage=20&q=%23ttnlive&window=h";	private String search_query_twitter = "%23ttnlive";*/		private String search_url_topsy = null;	private String search_query_twitter = null;	private Resources m_r;	private ListView listTw =null;	private TwArrayAdapter adapterTw = null;	// コンストラクタ    public TopsyLoadTask(Activity activity_) {    	activity = activity_;    	m_r = activity.getResources();    	listTw = (ListView)activity.findViewById(R.id.timeline_list);    	adapterTw =null;		progressMsg = m_r.getString(R.string.msg_progress_reflesh);		search_url_topsy = m_r.getString(R.string.search_url_topsy);		search_query_twitter = m_r.getString(R.string.search_query_twitter);		isTcoFlag=PrefUtil.get_boolean("isTcoFlag",false);		nowTime = new Date().getTime();		Locale locale = Locale.getDefault();		if(locale.equals(Locale.JAPAN))jp_flag = true;		debug_f = activity.getResources().getBoolean(R.bool.debug_flag);		progress(false,m_r.getString(R.string.msg_progress_reflesh));    }    private boolean check_limit(){    	HttpClient httpClient = new DefaultHttpClient();    	String url = "http://otter.topsy.com/credit.json";    	LogUtil.trace(TAG,"[check_limit]url="+url);    	StringBuilder uri = new StringBuilder(url);    	HttpGet request = new HttpGet(uri.toString());    	//HttpResponse httpResponse = null;    	String json = null;    	try {    		json = httpClient.execute(request,mResponseHandlerImpl);    	} catch (Exception e) {    	    LogUtil.error(TAG,"doInBackground",e);    	    return false;    	}    	//int status = httpResponse.getStatusLine().getStatusCode();    	//if (HttpStatus.SC_OK == status) {    	    try {    	        //ByteArrayOutputStream outputStream = new ByteArrayOutputStream();    	        //httpResponse.getEntity().writeTo(outputStream);    	        //json = outputStream.toString(); // JSONデータ    	        JSONObject rootObject = new JSONObject(json);            	JSONObject itemsObject = rootObject.getJSONObject("response");            	String item = itemsObject.getString("remaining");            	if(Integer.valueOf(item) > 0){            		return true;            	}    	    } catch (Exception e) {    	    	LogUtil.error(TAG,"doInBackground",e);    	    	return false;    	    }	    //}    	return false;    }    private ArrayList<TopsyBean> useTopsy(ArrayList<TopsyBean> tp_list){    	    	HttpClient httpClient = new DefaultHttpClient();    	String url = search_url_topsy;    	LogUtil.trace(TAG,"[doInBackground]url="+url);    	StringBuilder uri = new StringBuilder(url);    	HttpGet request = new HttpGet(uri.toString());    	//HttpResponse httpResponse = null;    	String json = null;    	try {    		json = httpClient.execute(request,mResponseHandlerImpl);    	} catch (Exception e) {    	    LogUtil.error(TAG,"doInBackground",e);    	    return null;    	}    	if(json==null || "".equals(json.trim())){    		LogUtil.error(TAG, "json null");    	    return null;    	}    	//int status = httpResponse.getStatusLine().getStatusCode();    	//if (HttpStatus.SC_OK == status) {    		LogUtil.trace(TAG,"doInBackground:HttpStatus.SC_OK");    	    try {    	        //ByteArrayOutputStream outputStream = new ByteArrayOutputStream();    	        //httpResponse.getEntity().writeTo(outputStream);    	        //String json;    	        //json = outputStream.toString(); // JSONデータ    	        JSONObject rootObject = new JSONObject(json);            	JSONObject itemsObject = rootObject.getJSONObject("response");    	        JSONArray list = itemsObject.getJSONArray("list");    	        int len_list = list==null ? 0:list.length();        		LogUtil.trace(TAG,"len_list="+len_list);        		    	        for (int cnt = 0; cnt < len_list; cnt++) {    	            JSONObject item = list.getJSONObject(cnt);    	            TopsyBean bean = new TopsyBean();        			final String screen_name = item.getString("trackback_author_nick");            		LogUtil.trace(TAG,"("+cnt+"):screen_name="+screen_name);            		bean.screen_name = screen_name;            		bean.user_name = item.getString("trackback_author_name");        			String twMsg =  item.getString("content");        			if(isTcoFlag){//t.co展開する場合            			int st = twMsg.indexOf("http://t.co/");            			if(st!=-1){                			int ed = twMsg.indexOf(" ",st);                			String urlStr = "";                			if(ed==-1){                       			urlStr = twMsg.substring(st);                			}                			else{                    			urlStr = twMsg.substring(st,ed);                			}                			try {                				String exurl = item.getString("url");    							if(exurl==null || "".equals(exurl))exurl = ShortURL.expand(new URL(urlStr)).toString();    							//    							if(exurl.indexOf("http://goo.gl/") !=-1){//    								exurl = ShortURL.expand(new URL(exurl)).toString();//    							}                    			if(ed==-1){        							twMsg = twMsg.substring(0,st) + exurl;                    			}                    			else{        							twMsg = twMsg.substring(0,st) + exurl +  twMsg.substring(ed);                    			}    						} catch (Exception e) {}            			}                		LogUtil.trace(TAG,"("+cnt+"):twMsg="+twMsg);        			}            		bean.text = twMsg;            		if(skip_at && bean.text.startsWith("@"))continue;            		        		    Date date = new Date(Long.valueOf(item.getString("firstpost_date"))*1000);        		    bean.date = date;        		    if(!tp_list.contains(bean)){            		    tp_list.add(bean);        		    }        			if(ImageCache.get(screen_name)==null){        				        				ImageLoad(screen_name,item.getString("topsy_author_img"));            			change_f=true;        			}    	        }    	    } catch (Exception e) {        	    LogUtil.error(TAG,"doInBackground[Topi]",e);    	    }    	    return tp_list;    }    private void ImageLoad(final String screen_name,String url){    	if(image_load_async){    		final AsyncHttpClient client = new AsyncHttpClient();    		client.get(url,     		        new BinaryHttpResponseHandler() {    		    @Override    		    public void onSuccess(byte[] fileData) {    		        Bitmap m_bmp_panel = BitmapFactory.decodeByteArray(fileData, 0, fileData.length);    		        ImageCache.put(screen_name,m_bmp_panel);    		    }    		});    		return;    	}		    	Bitmap m_bmp_panel = null;		try {			URL imageURL = new URL(screen_name);			m_bmp_panel = BitmapFactory.decodeStream(imageURL.openConnection().getInputStream());			/*            						int size = m_bmp_panel.getWidth() * m_bmp_panel.getHeight();			ByteArrayOutputStream out = new ByteArrayOutputStream(size);			m_bmp_panel.compress(Bitmap.CompressFormat.JPEG, 100, out);			byte[] bytSig = out.toByteArray();	*/            						ImageCache.put(screen_name,m_bmp_panel);		} catch (Exception e) {			LogUtil.error(TAG,"ImageLoad",e);			if(m_bmp_panel!=null){				m_bmp_panel.recycle();				m_bmp_panel=null;			}		}    }        // バックグラウンドで実行する処理    @Override	protected String[] doInBackground(Void... params) {    			ArrayList<TopsyBean> tp_list = new ArrayList<TopsyBean>();    	if(bUseTopsy){        	//limit いっていたらTwitterで        	if(!check_limit()){        		LogUtil.trace(TAG,"doInBackground:Limit");        		return doInBackground_old();        	}    		tp_list = useTopsy(tp_list);    	}    	            	String[] arr=null;	    try {    		//Twのリストも付加    		ArrayList<TopsyBean> core_list = doInBackground_old_core();    		if(core_list != null)tp_list.addAll(core_list);			if(bUseTopsy){				Collections.sort(tp_list, new TopsyBeanComparator());			}			int cnt = 0;	        arr = new String[tp_list.size()];	        			//if(bUseTopsy){				for(TopsyBean tp:tp_list){					if(b_publishProgress){						publishProgress(tp.toString());					}					else{						arr[cnt] = tp.toString();						cnt++;					}				}			//}	    } catch (Exception e) {    	    LogUtil.error(TAG,"doInBackground",e);    	    return null;	    }	    return arr;    }//    private final long DIFF_MICRO= 1000;//    private final long DIFF_SEC = DIFF_MICRO;//    private final long DIFF_MIN = 60 * DIFF_SEC;//    private final long DIFF_HOUR = 60 * 60 * DIFF_SEC;//    private final long DIFF_DAY = 60 * 60 * 24 *DIFF_SEC;    class TopsyBean{    	public String screen_name;    	public String user_name;    	public String text;    	public Date date;    	public String toString(){    		StringBuilder sb = new StringBuilder();			sb.append(screen_name);			sb.append(",");			sb.append(user_name);			sb.append(",");			sb.append(text);			sb.append(" \n");			//sb.append(df.format(date));//発言日時			//相対時間に変更（Tw社の規定による）			TimeSpanConverter tsc = new TimeSpanConverter();			sb.append(tsc.toTimeSpanString(date));/*			long diff = Math.abs(nowTime - date.getTime());			if(diff <DIFF_MIN){				sb.append(diff/DIFF_SEC).append(jp_flag ? "秒前":"sec");			}			else if(diff <DIFF_HOUR){				sb.append(diff/DIFF_MIN).append(jp_flag ? "分前":" min");			}			else if(diff <DIFF_DAY){				sb.append(diff/DIFF_HOUR).append(jp_flag ? "時間前":" hour");			}			else{				sb.append(dft.format(date));			}			//DEBUG			if(debug_f){				sb.append("-");				sb.append(df.format(date));			}*/			    		return sb.toString();    	}    }        public class TopsyBeanComparator implements Comparator<TopsyBean> {    	//逆順なのでマイナスをかける        public int compare(TopsyBean now, TopsyBean other) {        	if(now==null && other==null)return 0;        	if(now!=null && other==null)return 1;//-1;        	if(now==null && other!=null)return -1;//1;        	if(now.date==null && other.date==null)return 0;        	if(now.date!=null && other.date==null)return 1;//-1;        	if(now.date==null && other.date!=null)return -1;//1;        	return now.date.compareTo(other.date) * -1;        }    }	private String[] doInBackground_old(Void... params) {		ArrayList<TopsyBean> tp_list = doInBackground_old_core();		if(tp_list==null)return null;		String[] arr = new String[tp_list.size()];    	if(bUseTopsy){    		int cnt = 0;    		for(TopsyBean tp:tp_list){    			if(b_publishProgress){    				publishProgress(tp.toString());    			}    			else{    				arr[cnt] = tp.toString();    				cnt++;    			}    		}    	}    	return arr;    }	private ArrayList<TopsyBean> doInBackground_old_core() {    	//Date date = new Date();    	Query q= new Query();    	//q.setQuery("%23ttn25");    	q.setQuery(search_query_twitter);    	q.setResultType(Query.RECENT);    	//q.since(dfq.format(date));    	//q.until(dfq.format(date));    	//q.setLang("ja");		ArrayList<TopsyBean> tp_list = null;//new ArrayList<TopsyBean>();    	try {    		String user_at = "@" + twitter_main.m_screenName;    		List<twitter4j.Status> list=twitter_main.m_twitter.search(q).getTweets();    		tp_list = new ArrayList<TopsyBean>(list.size());    		//int len_list = list.size();    		for(twitter4j.Status tw:list){    			//StringBuilder sb = new StringBuilder();    			//twi_id,screen_name,msg    			//String screen_name = tw.getFromUser();//user.getScreenName();    			final String screen_name = tw.getUser().getScreenName();    			User user = twitter_main.userList.get(screen_name);    			if(user==null){        			user = twitter_main.m_twitter.showUser(screen_name);//tw.getFromUser());        			twitter_main.userList.put(screen_name,user);    			}	            TopsyBean bean = new TopsyBean();	            bean.screen_name =screen_name;	            bean.user_name =user.getName();    			String twMsg = tw.getText();    			if(isTcoFlag){//t.co展開する場合        			int st = twMsg.indexOf("http://t.co/");        			if(st!=-1){            			int ed = twMsg.indexOf(" ",st);            			String urlStr ="";            			if(ed==-1){                			urlStr = twMsg.substring(st);            			}            			else{                			urlStr = twMsg.substring(st,ed);            			}            			try {							//URL exurl = ShortURL.expand(new URL(urlStr));            				String exurl = null;            				for (URLEntity urlentity : tw.getURLEntities()) {            					//exurl = urlentity.getDisplayURL();   //Web画面に表示されるURL(文字列)            					exurl = urlentity.getExpandedURL();  //URL要素の元URL            					//exurl = urlentity.getURL();		  //t.coの短縮URL            				}            					            			if(ed==-1){								twMsg = twMsg.substring(0,st) + exurl;//.toString() ;	            			}	            			else{								twMsg = twMsg.substring(0,st) + exurl/*.toString()*/ +  twMsg.substring(ed);	            			}						} catch (Exception e) {}        			}    			}    			bean.text = twMsg;        		if(skip_at && bean.text.startsWith("@") && !bean.text.startsWith(user_at))continue;    			bean.date = tw.getCreatedAt();//発言日時    			if(ImageCache.get(screen_name)==null){    				ImageLoad(screen_name,user.getMiniProfileImageURL());        			change_f=true;    			}    			if(!bUseTopsy && b_publishProgress){        			publishProgress(bean.toString());    			}    			else{        			tp_list.add(bean);    			}    		}		} catch (Exception e) {			return null;		}    	return tp_list;	}	@Override	protected void onProgressUpdate(String... progress) {		//final ListView listTw = (ListView)activity.findViewById(R.id.timeline_list);		for (String bean_s : progress) {			if(adapterTw==null)	adapterTw = twitter_main.timeLineAdd(listTw, bean_s,true);			else				twitter_main.timeLineAdd(listTw, bean_s);		}	}    // メインスレッドで実行する処理    @Override    protected void onPostExecute(String[] tw_arr) {    	if(tw_arr==null){    		progress(true,progressMsg);    		return;    	}    	if(change_f)ImageCache.saveIconList();    			//final ListView listTw = (ListView)activity.findViewById(R.id.timeline_list);		if(!b_publishProgress){			twitter_main.timeLineCreate(listTw, tw_arr);		}		progress(true,progressMsg);    }	 /** 今回注目のResponseHandlerの実装 */    private final ResponseHandler<String> mResponseHandlerImpl = new ResponseHandler<String>() {        /**         * handleResponse         * @see org.apache.http.client.ResponseHandler#handleResponse(org.apache.http.HttpResponse)         */        @Override        public String handleResponse(HttpResponse response)throws ClientProtocolException, IOException {            // リクエストのコンテンツを取得する            InputStream in = response.getEntity().getContent();            InputStreamReader isr = new InputStreamReader(in,"UTF-8");            BufferedReader reader = new BufferedReader(isr);            StringBuffer buffer = new StringBuffer();            // 読み込み            String line = null;            while((line = reader.readLine()) != null) {                buffer.append(line);                buffer.append("\n");            }            reader.close();            isr.close();            in.close();            // 結果を返却            return buffer.toString();        }    };    	public static void progress_stop(){		if(progressDialog!=null)progressDialog.dismiss();		progressDialog = null;	}	private static ProgressDialog progressDialog;	public void progress(boolean enabled,String msg){		if(!enabled){        	progressDialog = new ProgressDialog(activity);        	progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);        	progressDialog.setMessage(msg);        	progressDialog.setCancelable(true);        	progressDialog.show();		}		else{			if(progressDialog!=null)progressDialog.dismiss();			progressDialog = null;		}	}}